rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isSignedIn() { return request.auth != null; }
    function isAdmin() {
      // Users are admins if users/{uid}.userType == 'admin'
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }

    // ===================== Posts & Anonymous Board =====================
    match /posts/{postId} {
      allow read: if true;
      // Signed-in users can create posts; only admins can update/delete (e.g., hide/unhide, remove)
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();

      // Likes subcollection: user can like/unlike their own doc
      match /likes/{uid} {
        allow read: if true;
        allow create, delete: if isSignedIn() && request.auth.uid == uid;
        allow update: if false;
      }

      // Replies subcollection: any signed-in user can reply (admin can moderate server-side)
      match /replies/{replyId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
    }

    // ===================== Users & Owner Data =====================
    match /users/{uid} {
      // Read own profile; admins can read any
      allow read: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Create own user doc on first sign-in; admins also allowed
      allow create: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Update own doc but cannot change userType; admins can update anything
      allow update: if (
        isAdmin() || (
          isSignedIn() && request.auth.uid == uid &&
          request.resource.data.userType == resource.data.userType
        )
      );
      // Delete restricted to admins (protect account docs)
      allow delete: if isAdmin();

      // Mutes: which anonymous IDs this user has muted
      match /mutes/{anonId} {
        allow read: if isSignedIn() && request.auth.uid == uid;
        allow create, delete: if isSignedIn() && request.auth.uid == uid;
        allow update: if false;
      }

      // Wellness Report moods
      match /moods/{moodId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // Meditation sessions recorded per user
      match /sessions/{sessionId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // Private docs (plans, settings, etc.)
      match /private/{docId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // User badges
      match /badges/{badgeId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // User stats (e.g., aggregate minutes)
      match /stats/{statId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // User favorites (meditations the user starred)
      match /favorites/{favId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }
    }

    // ===================== Reports (Moderation Queue) =====================
    match /reports/{reportId} {
      // Allow any signed-in user to create a report
      allow create: if isSignedIn();
      // Admins can read the queue, update statuses, and delete entries
      allow read, update, delete: if isAdmin();
    }

    // ===================== Challenges =====================
    match /challenges/{challengeId} {
      allow read: if true; // public read
      // Only admins manage root challenge docs
      allow create, update, delete: if isAdmin();

      // Participants: users can create/update their own document (minutes, teamId, completed)
      match /participants/{uid} {
        allow read: if true;
        allow create, update: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
        allow delete: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      }

      // Teams (names, totals) — client read-only
      match /teams/{teamId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
      }

      // Feed (join/progress/completion) — client append-only
      match /feed/{eventId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isAdmin();
      }
    }

    // ===================== Admin-managed content =====================
    match /admin_meditations/{medId} {
      allow read: if true; // preload catalog without auth
      allow create, update, delete: if isAdmin();
    }
    match /admin_plans/{planId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /admin_groups/{groupId} {
      allow read, create, update, delete: if isAdmin();
    }
    match /flagged_posts/{flagId} {
      allow read, create, update, delete: if isAdmin();
    }
    match /admin_audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
    }
    match /admin_config/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    // Runtime admin badge catalog (icons/emoji metadata)
    match /admin_badges/{badgeId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // ===================== Privacy requests =====================
    match /privacy_requests/{reqId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin();
    }
  }
}
