rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      // Single source of truth: users/{uid}.userType == 'admin'
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }

    // Default: read allowed for signed-in users; write denied unless specified
    match /{document=**} {
      allow read: if isSignedIn();
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if true; // public
      // Only admins can create/update/delete challenges
      allow create, update, delete: if isAdmin();
      allow get, list: if true;

      // Subcollections within a challenge
      match /participants/{uid} {
        allow read: if isSignedIn();
        // A user can create/update their own participant doc (including teamId assignment); admins can write anything
        allow create, update: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
        allow delete: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      }
      match /teams/{teamId} {
        allow read: if true;
        allow write: if isAdmin();
      }
      match /feed/{eventId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
      }
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      // Anyone signed in can create posts; moderation fields can only be updated by admins
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Admin-managed content (readable by users, writable by admins)
    match /admin_meditations/{medId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    match /admin_plans/{planId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // Users collection (limited self-write)
    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid || isAdmin();
      allow update: if request.auth.uid == uid; // user can update their own profile (not admin-only fields enforced by rules structure)
    }

    // Admin audit logs (admin-only write)
    match /admin_audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
    }

    // Privacy requests
    match /privacy_requests/{reqId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin();
    }
  }
}
