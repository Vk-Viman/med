rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      // Single source of truth: users/{uid}.userType == 'admin'
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }

    // IMPORTANT: Do NOT add a blanket allow here. Define rules per-collection below.

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if true; // public
      // Only admins can create/update/delete challenges
      allow create, update, delete: if isAdmin();
      allow get, list: if true;

      // Subcollections within a challenge
      match /participants/{uid} {
        allow read: if isSignedIn();
        // A user can create/update their own participant doc (including teamId assignment); admins can write anything
        allow create, update: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
        allow delete: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      }
      match /teams/{teamId} {
        allow read: if true;
        allow write: if isAdmin();
      }
      match /feed/{eventId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
      }
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if true;
      // Anyone signed in can create posts; moderation fields can only be updated by admins
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Admin-managed content (readable by users, writable by admins)
    match /admin_meditations/{medId} {
      // Public read so app can load catalog before auth initializes
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /admin_plans/{planId} {
      // Public read to show plan templates without requiring auth
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Admin-managed groups (admin UI only)
    match /admin_groups/{groupId} {
      allow read, create, update, delete: if isAdmin();
    }

    // Moderation flags (admin-only)
    match /flagged_posts/{flagId} {
      allow read, create, update, delete: if isAdmin();
    }

    // Users collection (self access + owner-only subcollections)
    match /users/{uid} {
      // Allow owner to read their profile; admins can read any
      allow read: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Owner can create their doc (first sign-in), admins too
      allow create: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Owner can update their profile, but cannot change userType; admins can update anything
      allow update: if (
        isAdmin() || (
          isSignedIn() && request.auth.uid == uid &&
          // Protect userType from non-admin edits
          request.resource.data.userType == resource.data.userType
        )
      );

      // Owner-only moods subcollection used by Wellness Report
      match /moods/{moodId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // Meditation sessions recorded per user
      match /sessions/{sessionId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // Private docs (e.g., plan, settings, encrypted blobs)
      match /private/{docId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // User badges (awards)
      match /badges/{badgeId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }

      // User stats (aggregates like totalMinutes)
      match /stats/{statId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }
    }

    // Admin audit logs (admin-only write)
    match /admin_audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
    }

    // Admin app configuration: readable by signed-in users, writable by admins only
    match /admin_config/{docId} {
      // Public read so feature flags load even pre-auth
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Privacy requests
    match /privacy_requests/{reqId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin();
    }
  }
}
